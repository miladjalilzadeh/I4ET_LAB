// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract FerryService {
    struct Customer {
        string fullName;
        bool firstTime;
        uint256 tokenBalance;
    }

    mapping(uint256 => Customer) private customers;
    mapping(address => uint256) private loggedInUsers;
    uint256 private ownerTravelId;

    string public freeWifiCode = "SARRAY_MIL";

    // Variables for temperature and humidity
    int private temperature;
    uint private humidity;
    
    bool private dampedSeatActive;

    address private constant companyAccount = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;
    address private customerAccount;

    // Jokes array
    string[] private jokes = [
        "Why don't skeletons fight each other? They don't have the guts.",
        "Why did the scarecrow become a successful neurosurgeon? He was outstanding in his field.",
        "What did the janitor say when he jumped out of the closet? Supplies!"
    ];

    constructor(address _customerAccount) payable {
        ownerTravelId = 637042012; // Omer Farooq's travel ID
        customerAccount = _customerAccount;

        // Pre-loading customer database
        customers[69039] = Customer("Milad", true, 0);
        customers[39069] = Customer("Urfan", true, 0);

        // Initial values for temperature and humidity
        temperature = 25;
        humidity = 50;

        // Transfer 2 Ether to the contract
        require(msg.value >= 2 ether, "Insufficient initial funding.");

        // Initialize damped seat feature
        dampedSeatActive = false;
    }

    modifier onlyLoggedIn() {
        require(loggedInUsers[msg.sender] != 0, "You must be logged in to perform this action.");
        _;
    }

    modifier onlyOwner() {
        require(loggedInUsers[msg.sender] == ownerTravelId, "Only the owner can perform this action.");
        _;
    }

    function login(string memory _fullName, uint256 _travelId) public returns (string memory) {
        require(loggedInUsers[msg.sender] == 0, "You are already logged in.");
        
        if (_travelId == ownerTravelId) {
            require(
                keccak256(abi.encodePacked("Omer Farooq")) == keccak256(abi.encodePacked(_fullName)),
                "Invalid name or travel ID."
            );

            loggedInUsers[msg.sender] = _travelId;
            return "Welcome owner Omer Farooq!";
        } else {
            Customer storage customer = customers[_travelId];
            require(
                keccak256(abi.encodePacked(customer.fullName)) == keccak256(abi.encodePacked(_fullName)),
                "Invalid name or travel ID."
            );

            loggedInUsers[msg.sender] = _travelId;

            if (customer.firstTime) {
                customer.firstTime = false;
                customer.tokenBalance += 10;
                return string(abi.encodePacked("Welcome ", customer.fullName, "! Since it's your first time travelling with us, we are giving you free WiFi (", freeWifiCode, ") and 10 tokens."));
            } else {
                return string(abi.encodePacked("Welcome back, ", customer.fullName, "!"));
            }
        }
    }

    function logout() public onlyLoggedIn {
        delete loggedInUsers[msg.sender];
    }

    function getTokenBalance() public view onlyLoggedIn returns (uint256) {
        uint256 travelId = loggedInUsers[msg.sender];
        return customers[travelId].tokenBalance;
    }

    function rechargeTokens(uint256 _tokenAmount) public onlyLoggedIn {
        uint256 travelId = loggedInUsers[msg.sender];
        require(travelId != ownerTravelId, "Owner does not need to buy tokens.");
        
        uint256 etherAmount = (_tokenAmount / 10) * 1 ether;
        require(etherAmount > 0, "You must buy at least 10 tokens.");

        // Transfer Ether to the company account from the customer account
        payable(companyAccount).transfer(etherAmount);

        customers[travelId].tokenBalance += _tokenAmount;
    }
    
    // Function to add a new customer (only owner can perform this action)
    function addCustomer(uint256 _newTravelId, string memory _fullName) public onlyLoggedIn onlyOwner {
        customers[_newTravelId] = Customer(_fullName, true, 0);
    }

    // Function to remove a customer (only owner can perform this action)
    function removeCustomer(uint256 _travelId) public onlyLoggedIn onlyOwner {
        delete customers[_travelId];
    }

    // Function to get current temperature
    function getTemperature() public view onlyLoggedIn returns (int) {
        return temperature;
    }

    // Function to get current humidity
    function getHumidity() public view onlyLoggedIn returns (uint) {
        return humidity;
    }

    // Function to set temperature
    function setTemperature(int _newTemperature) public onlyLoggedIn {
        require(_newTemperature >= 16 && _newTemperature <= 30, "Temperature must be between 16 and 30 degrees Celsius.");
        
        uint256 travelId = loggedInUsers[msg.sender];
        if (travelId != ownerTravelId) {
            require(customers[travelId].tokenBalance >= 2, "Insufficient tokens.");
            customers[travelId].tokenBalance -= 2;
        }

        temperature = _newTemperature;
    }

    // Function to set humidity
    function setHumidity(uint _newHumidity) public onlyLoggedIn {
        require(_newHumidity >= 30 && _newHumidity <= 60, "Humidity must be between 30 and 60%.");
        
        uint256 travelId = loggedInUsers[msg.sender];
        if (travelId != ownerTravelId) {
            require(customers[travelId].tokenBalance >= 2, "Insufficient tokens.");
            customers[travelId].tokenBalance -= 2;
        }

        humidity = _newHumidity;
    }
    
    // Function to activate damped seat feature
    function activateDampedSeat() public onlyLoggedIn {
        uint256 travelId = loggedInUsers[msg.sender];
        require(travelId != ownerTravelId, "Owner does not need to pay for the damped seat.");
        require(!dampedSeatActive, "Damped seat is already active.");
        require(customers[travelId].tokenBalance >= 5, "Insufficient tokens.");

        customers[travelId].tokenBalance -= 5;
        dampedSeatActive = true;
    }

    // Function to check if damped seat is active
    function isDampedSeatActive() public view returns (bool) {
        return dampedSeatActive;
    }

    // Function to get a random joke
    function tellJoke() public view returns (string memory) {
        uint256 index = uint256(keccak256(abi.encodePacked(block.timestamp, block.basefee, msg.sender))) % jokes.length;
        return jokes[index];
    }

    // Fallback function to receive Ether
    receive() external payable {}
}
