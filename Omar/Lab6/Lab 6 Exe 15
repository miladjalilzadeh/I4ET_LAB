// SPDX-License-Identifier: Unlicenced
pragma solidity 0.8.18;

contract DemoContract {
    address public owner;

    struct Receivers {
        string name;
        uint256 tokens;
    }

    mapping(address => Receivers) public users;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;
        users[owner].tokens = 100;
    }

    function double(uint value) public pure returns (uint) {
        return value * 2;
    }

    function register(string memory name) public {
        users[msg.sender].name = name;
    }

    function buyTokens() public payable {
        uint tokenPrice = 2 ether;

        uint minEtherAmount = tokenPrice;

        require(msg.value >= minEtherAmount, "Insufficient Ether sent");

        uint tokensToPurchase = msg.value / tokenPrice;

        require(users[owner].tokens >= tokensToPurchase, "Not enough tokens available for purchase");

        users[owner].tokens -= tokensToPurchase;

        users[msg.sender].tokens += tokensToPurchase;
    }
}
