// SPDX-License-Identifier: MIT

pragma solidity >=0.5.0 <0.8.25;

struct Product {
    string name;
    uint id;
}

contract Factory {
      uint public idDigits = 16;
      uint idModulus = 10 ^ idDigits;
      Product[] public products;

      event NewProduct(uint ArrayProductId, string name, uint id);

      function _createProduct(string memory _name, uint _id) private {
        Product memory New_Product = Product(_name, _id);
        products.push(New_Product);

        uint _ArrayProductId = products.length-1;
        emit NewProduct(_ArrayProductId, _name, _id);
      }
      function _generateRandomId(string memory _str) private view returns(uint) {
        uint rand = uint(keccak256(abi.encodePacked(_str)));
        return rand % idModulus; 
      }
      function createRandomProduct(string memory _name) public {
        uint randld = _generateRandomId(_name);
        _createProduct(_name, randld);
      }

      mapping (uint => address) public productToOwner;
      mapping (address => uint) public ownerProductCount;

      function Ownership(uint _productId) public {
        productToOwner[_productId] = msg.sender; 
        ownerProductCount[msg.sender]++;
      }

      function getProductsByOwner(address _owner) external view returns(uint[] memory){
        uint counter = 0;
        uint[] memory result = new uint[](ownerProductCount[_owner]);

        for (uint i = 0; i < products.length; i++){
            if (productToOwner[i] == _owner){
                result[counter] = i;
                counter++;
            }
        }
        return result;
      }

      mapping (uint => uint) public age;
      modifier olderThan(uint _age, uint _userId){
        require (age[_userId] >= _age, "User not old enough");
        _;
      }
      function validationUsers(uint _userId) public view olderThan(18, _userId){

      }

}
